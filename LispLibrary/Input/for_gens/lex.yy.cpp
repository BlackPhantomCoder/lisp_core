// lex.yy.cpp generated by reflex 3.2.0 from D:\repos\BlackPhantomCoder\lisp_core\LispLibrary\Input\for_gens\FSM_nonmacros.l

#define REFLEX_VERSION "3.2.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_graphs_file         "FSM_nonmacros"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_outfile             "lex.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex(void);
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int Lexer::lex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:;[^\\x0a]*(?:\\n|\\z)))|((?:\"(?:[^\"\\x5c]|\\\\\\\\|\\\\\"|\\\\[^\"])*\"))|((?:\\|(?:[^\\x5c\\x7c]|\\\\\\\\|\\\\\"|\\\\[^\"])*\\|))";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule D:\repos\BlackPhantomCoder\lisp_core\LispLibrary\Input\for_gens\FSM_nonmacros.l:5: {comment_line} :
#line 5 "D:\\repos\\BlackPhantomCoder\\lisp_core\\LispLibrary\\Input\\for_gens\\FSM_nonmacros.l"
{}//# comment
            break;
          case 2: // rule D:\repos\BlackPhantomCoder\lisp_core\LispLibrary\Input\for_gens\FSM_nonmacros.l:6: {str1} :
#line 6 "D:\\repos\\BlackPhantomCoder\\lisp_core\\LispLibrary\\Input\\for_gens\\FSM_nonmacros.l"
{}//# str1
            break;
          case 3: // rule D:\repos\BlackPhantomCoder\lisp_core\LispLibrary\Input\for_gens\FSM_nonmacros.l:7: {str2} :
#line 7 "D:\\repos\\BlackPhantomCoder\\lisp_core\\LispLibrary\\Input\\for_gens\\FSM_nonmacros.l"
{}//# str2
            break;
        }
  }
}
